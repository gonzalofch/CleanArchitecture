@using PizzaBlazor.Client;
@using PizzaBlazor.Client.Components.Modals;
@using PizzaBlazor.Client.Services;
@using System.Text;
@using PizzaBlazor.Shared.DtoModels;

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState

@page "/"
@page "/pizzas"
@*Pruebas de Navigation Manager con lo que devuelven*@

<div class="main">

    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
            @if (OrderState.ShowingConfigureDialog)
            {
                <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                                      OnCancel="OrderState.CancelConfigurePizzaDialog"
                                      OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        Console.WriteLine(order);
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <ul>
                        @* <li>@configuredPizza.Id</li>
                <li>@configuredPizza.OrderId</li>
                <li>@configuredPizza.SpecialId</li>
                <li>@configuredPizza.Toppings.Count</li> *@
                        @*  @foreach (var topping in configuredPizza.Toppings)
                {
                <li>+ @topping.Topping?.Name</li>

                } *@
                    </ul>
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                    <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>



@*SE PUEDE TRAER UNA PAGINA COMO SI FUERA UN COMPONENTE*@

@* <div style="background:red">
    <MyOrders></MyOrders>
</div> *@

@code {

    List<PizzaSpecialDTO> specials = new();

    OrderDTO order => OrderState.Order;

    /*
     * With NavigationManager we can obtain all these values
     * The current full URI, such as http://www.blablablazor.com/pizzas/margherita?extratopping=pineapple.
     *     The base URI, such as http://www.blablablazor.com/.
     *     The base relative path, such as pizzas/margherita.
     *     The query string, such as ?extratopping=pineapple.
     */


    private void Navigate()
    {
        NavigationManager.NavigateTo("/another-page");
    }

    private void NavigateToPaymentPage()
    {
        NavigationManager.NavigateTo("buypizza");
    }


    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecialDTO>>(NavigationManager.BaseUri + "specials");
    }

    private void IncrementSales()
    {
        SalesState.PizzasSoldToday++;
    }
}